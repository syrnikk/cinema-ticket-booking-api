# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class Register():
  def __init__(self):
    self.imie = "Anonim"
    self.nazwisko = "Anonimowy"
    self.data_urodzenia = "01-02-2001"
    self.email = "anonimowy@test.com"
    self.password = "1234"
    self.phone = "654654654"
    print()

  def setup_method(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self):
    self.driver.quit()
  
  def test(self):
    # Test name: register
    # Step # | name | target | value | comment
    time.sleep(4)
    # 1 | open | / |  | 
    self.driver.get("https://89b4778d.cinema-app.pages.dev/")

    time.sleep(4)
    # 2 | click | css=.css-q6al5w |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".css-q6al5w").click()
    
    time.sleep(4)
    # 3 | click | id=:r0: |  | 
    self.driver.find_element(By.ID, ":r0:").click()
    
    time.sleep(4)
    # 4 | type | id=:r0: | Anonim | 
    self.driver.find_element(By.ID, ":r0:").send_keys(self.imie)
    
    # 5 | type | id=:r1: | Anonimowy | 
    self.driver.find_element(By.ID, ":r1:").send_keys(self.nazwisko)

    # 6 | type | id=:r2: | 2001-02-01 | 
    self.driver.find_element(By.ID, ":r2:").send_keys(self.data_urodzenia)
    self.vars["data_urodzenia"] = self.data_urodzenia

    # 7 | type | id=:r3: | anonimowy@test.com | 
    self.driver.find_element(By.ID, ":r3:").send_keys(self.email)

    # 8 | click | id=:r4: |  | 
    self.driver.find_element(By.ID, ":r4:").click()

    # 9 | type | id=:r4: | 654654654 | 
    self.driver.find_element(By.ID, ":r4:").send_keys(self.phone)

    # 10 | type | id=:r5: | 1234 | 
    self.driver.find_element(By.ID, ":r5:").send_keys(self.password)

    # 11 | type | id=:r6: | 1234 | 
    self.driver.find_element(By.ID, ":r6:").send_keys(self.password)

    # 12 | click | id=:r0: |  | 
    self.driver.find_element(By.ID, ":r0:").click()

    # 13 | click | id=:r0: |  | 
    self.driver.find_element(By.ID, ":r0:").click()

    # 14 | storeValue | id=:r0: | imie | 
    self.vars["imie"] = self.driver.find_element(By.ID, ":r0:").get_attribute("value")

    # 15 | click | id=:r1: |  | 
    self.driver.find_element(By.ID, ":r1:").click()
    
    # 16 | storeValue | id=:r1: | nazwisko | 
    self.vars["nazwisko"] = self.driver.find_element(By.ID, ":r1:").get_attribute("value")
    self.vars["imie_i_nazwisko"] = self.vars["imie"] + " " + self.vars["nazwisko"]
    
    # 17 | mouseMoveAt | id=:r3: | 8.5625,12.984375 | 
    element = self.driver.find_element(By.ID, ":r3:")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    # 18 | mouseUpAt | id=:r3: | 8.5625,12.984375 | 
    element = self.driver.find_element(By.ID, ":r3:")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    
    # 19 | click | id=:r3: |  | 
    self.driver.find_element(By.ID, ":r3:").click()
    
    # 20 | storeValue | id=:r3: | email | 
    self.vars["email"] = self.driver.find_element(By.ID, ":r3:").get_attribute("value")

    # 21 | mouseUpAt | id=:r4: | 8.5625,12.984375 | 
    element = self.driver.find_element(By.ID, ":r4:")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    
    # 22 | click | id=:r4: |  | 
    self.driver.find_element(By.ID, ":r4:").click()
    
    # 23 | storeValue | id=:r4: | email | 
    self.vars["phone"] = self.driver.find_element(By.ID, ":r4:").get_attribute("value")
    
    # 24 | click | id=:r6: |  | 
    self.driver.find_element(By.ID, ":r6:").click()
    
    time.sleep(4)
    # 25 | click | css=.PrivateSwitchBase-input |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".PrivateSwitchBase-input").click()
    
    time.sleep(4)
    # 26 | verifyChecked | css=.PrivateSwitchBase-input |  | 
    assert self.driver.find_element(By.CSS_SELECTOR, ".PrivateSwitchBase-input").is_selected() is True
    
    time.sleep(2)
    print("\nBox is correctly selected!")
    time.sleep(2)
    # 27 | click | css=.css-10ciq9j |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".css-10ciq9j").click()
    
    time.sleep(4)
    # 28 | runScript | window.scrollTo(0,0) |  | 
    self.driver.execute_script("window.scrollTo(0,0)")
    
    time.sleep(4)
    # 29 | mouseOver | css=.MuiAvatar-fallback |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".MuiAvatar-fallback")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    time.sleep(2)
    print("\nRegistration was successful!\nYou are now logged in!")
    time.sleep(2)
    # 30 | verifyText | css=.css-16xxzug | ANONIM ANONIMOWY | 
    assert self.driver.find_element(By.CSS_SELECTOR, ".css-16xxzug").text == self.vars["imie_i_nazwisko"].upper()
    
    time.sleep(2)
    print("\nName and surname match!")
    time.sleep(2)
    # 31 | mouseOver | css=.css-16xxzug |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".css-16xxzug")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    time.sleep(4)
    # 32 | click | css=.css-16xxzug |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".css-16xxzug").click()
    
    time.sleep(4)
    # 33 | click | css=.css-1hxb0fh |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".css-1hxb0fh").click()
    
    time.sleep(4)
    # 34 | verifyText | css=.css-aqki53:nth-child(1) > .MuiTypography-root | Anonim Anonimowy | 
    assert self.driver.find_element(By.CSS_SELECTOR, ".css-aqki53:nth-child(1) > .MuiTypography-root").text == self.vars["imie_i_nazwisko"]
    
    print("\nName and surname match!")
    # 35 | click | css=.css-x0yk1z |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".css-x0yk1z").click()
    
    # 36 | verifyText | css=.MuiBox-root:nth-child(2) > .MuiTypography-root | anonimowy@test.com | 
    assert self.driver.find_element(By.CSS_SELECTOR, ".MuiBox-root:nth-child(2) > .MuiTypography-root").text == self.vars["email"]
    
    print("\nE-mail addresses match!")
    # 37 | click | css=.MuiBox-root:nth-child(3) > .MuiTypography-root |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".MuiBox-root:nth-child(3) > .MuiTypography-root").click()
    
    # 38 | verifyText | css=.MuiBox-root:nth-child(3) > .MuiTypography-root | 01.02.2001r. | 
    assert self.driver.find_element(By.CSS_SELECTOR, ".MuiBox-root:nth-child(3) > .MuiTypography-root").text.replace("r.", "").replace(".", "-") == self.vars["data_urodzenia"]
    
    print("\nDates of birth match!")
    # 39 | click | css=.MuiBox-root:nth-child(4) > .MuiTypography-root |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".MuiBox-root:nth-child(4) > .MuiTypography-root").click()
    
    # 40 | verifyText | css=.MuiBox-root:nth-child(4) > .MuiTypography-root | +48 654 654 654 | 
    assert self.driver.find_element(By.CSS_SELECTOR, ".MuiBox-root:nth-child(4) > .MuiTypography-root").text.replace(" ", '').replace("+48", "") == self.vars["phone"]
    
    time.sleep(2)
    print("\nPhone numbers match!")
    time.sleep(2)
    # 41 | click | css=.MuiButton-outlined |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".MuiButton-outlined").click()
    
    time.sleep(2)
    print("\nLogout was successful!")
    time.sleep(2)
    # 42 | mouseOver | css=.css-q6al5w |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".css-q6al5w")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    time.sleep(4)
    # 43 | mouseOver | css=.MuiButton-outlined |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".MuiButton-outlined")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    time.sleep(4)
    # 44 | click | css=.MuiButton-outlined |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".MuiButton-outlined").click()
    
    time.sleep(4)
    # 45 | click | id=:r7: |  | 
    self.driver.find_element(By.ID, ":r7:").click()
    
    time.sleep(4)
    # 46 | click | id=:r7: |  | 
    self.driver.find_element(By.ID, ":r7:").click()
    
    time.sleep(4)
    # 47 | type | id=:r7: | anonimowy@test.com | 
    self.driver.find_element(By.ID, ":r7:").send_keys(self.vars["email"])
    
    # 48 | click | id=:r8: |  | 
    self.driver.find_element(By.ID, ":r8:").click()
    
    # 49 | mouseOver | css=.css-no3uto |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".css-no3uto")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    # 50 | type | id=:r8: | 1234 | 
    self.driver.find_element(By.ID, ":r8:").send_keys(self.password)
    
    # 51 | click | css=.css-no3uto |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".css-no3uto").click()
    
    time.sleep(2)
    print("\nLogin was successful!")
    time.sleep(2)
    # 52 | mouseOver | css=.css-16xxzug |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".css-16xxzug")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()

    time.sleep(4)
    # 53 | click | css=.css-16xxzug |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".css-16xxzug").click()
    
    time.sleep(4)
    # 54 | click | css=.MuiButton-contained |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".MuiButton-contained").click()
    
    time.sleep(4)
    # 55 | click | css=.MuiButton-contained:nth-child(1) |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".MuiButton-contained:nth-child(1)").click()
    
    time.sleep(2)
    print("\nDeleting of account was succesful!")
    time.sleep(2)
    # 56 | mouseOver | css=a:nth-child(3) path |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "a:nth-child(3) path")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    time.sleep(4)
    # 57 | mouseOver | css=.MuiGrid-root:nth-child(2) img |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".MuiGrid-root:nth-child(2) img")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    time.sleep(4)
    # 58 | click | css=.MuiButton-outlined |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".MuiButton-outlined").click()
    
    time.sleep(4)
    # 59 | click | id=:r9: |  | 
    self.driver.find_element(By.ID, ":r9:").click()
    
    time.sleep(4)
    # 60 | type | id=:r9: | anonimowy@test.com | 
    self.driver.find_element(By.ID, ":r9:").send_keys(self.vars["email"])
    
    # 61 | click | id=:ra: |  | 
    self.driver.find_element(By.ID, ":ra:").click()
    
    # 62 | mouseOver | css=.css-no3uto |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".css-no3uto")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    # 63 | type | id=:ra: | 1234 | 
    self.driver.find_element(By.ID, ":ra:").send_keys(self.password)
    
    time.sleep(4)
    # 64 | click | css=.css-no3uto |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".css-no3uto").click()
    
    time.sleep(4)
    # 65 | assertAlert | ERROR: Incorrect username or password |  | 
    assert self.driver.switch_to.alert.text == "ERROR: Incorrect username or password"
    time.sleep(2)
    print("\nLogin was not successful - account of given credentials does not exist!")
    time.sleep(2)
    
  
# if __name__ == "__main__":
#     sel1 = Register()
#     sel1.setup_method()
#     sel1.test()
#     sel1.teardown_method()